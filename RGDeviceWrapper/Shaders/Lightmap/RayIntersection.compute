#include <StdInclude.h>
#include "autoBinder.h"

#deifne LIGHTMAP_STATE_IDLE		0
#define LIGHTMAP_STATE_SCATTER	(1*0x00000100)
#define LIGHTMAP_STATE_THROUGH	(2*0x00000100)
#define LIGHTMAP_STATE_NEXTBOX	(3*0x00000100)
#define LIGHTMAP_STATE_TREADEND	(4*0x00000100)

void assignResult(LightmapIntersectResult a_Res)
{
	/* deocde
	float x = a_Res.m_OriginNormal.x;
    float y = a_Res.m_OriginNormal.y;
    float z = a_Res.m_OriginNormal.z;
    float x2 = x*x;
    float y2 = y*y;
    float z2 = z*z;

	basis[0]  = 1.0 / 2.0 * sqrt(1.0 / MATH_PI);
    basis[1]  = sqrt(3.0 / (4.0 * MATH_PI))*z;
    basis[2]  = sqrt(3.0 / (4.0 * MATH_PI))*y;
    basis[3]  = sqrt(3.0 / (4.0 * MATH_PI))*x;
    basis[4]  = 1.0 / 2.0 * sqrt(15.0 / MATH_PI) * x * z;
    basis[5]  = 1.0 / 2.0 * sqrt(15.0 / MATH_PI) * z * y;
    basis[6]  = 1.0 / 4.0 * sqrt(5.0 / MATH_PI) * (-x*x - z*z + 2 * y*y);
    basis[7]  = 1.0 / 2.0 * sqrt(15.0 / MATH_PI) * y * x;
    basis[8]  = 1.0 / 4.0 * sqrt(15.0 / MATH_PI) * (x*x - z*z);
    basis[9]  = 1.0 / 4.0 * sqrt(35.0 / (2.f*MATH_PI))*(3 * x2 - z2)*z;
    basis[10] = 1.0 / 2.0 * sqrt(105.0 / MATH_PI)*x*z*y;
    basis[11] = 1.0 / 4.0 * sqrt(21.0 / (2.f * MATH_PI))*z*(4 * y2 - x2 - z2);
    basis[12] = 1.0 / 4.0 * sqrt(7.0 / MATH_PI)*y*(2 * y2 - 3 * x2 - 3 * z2);
    basis[13] = 1.0 / 4.0 * sqrt(21.0 / (2.f * MATH_PI))*x*(4 * y2 - x2 - z2);
    basis[14] = 1.0 / 4.0 * sqrt(105.0 / MATH_PI)*(x2 - z2)*y;
    basis[15] = 1.0 / 4.0 * sqrt(35.0 / (2 * MATH_PI))*(x2 - 3 * z2)*x;

	vec3 c = vec3(0,0,0);
    for (int i = 0; i < 16; i++)
    {
        c += coef[i] * basis[i];
    }
    
    FragColor = vec4(c, 1);

	// encode
	double weight =4.0 * PI;
    for(int i=0; i<n_samples; ++i) 
    {
        for(int n=0; n<n_coeff; ++n)
        {
        result[n] += lightColor * samples[i].SH_basis_coeff[n];
        }
    }
    double factor = weight / n_samples;
    for(i=0; i<n_coeff; ++i)
    {
        result[i] = result[i] * factor;
    }
	*/
}

[numthreads(16, 1, 1 )]
void main(uint3 a_ThreadID : SV_DispatchThreadID)
{
	LightmapIntersectResult l_Res = g_Result[a_ThreadID.x];
	LightmapBox l_Box = (LightmapBox)0;
	int l_MaxSampleCount = g_Triangles[0].w;
	switch( l_Res.m_StateDepth & 0xffffff00 )
	{
		case LIGHTMAP_STATE_IDLE:{
			int l_RayID = 0;
			InterlockedAdd(g_Triangles[0].y, 1, l_RayID);
			if( l_RayID >= l_MaxSampleCount )
			{
				int l_NextTarget = g_Triangles[0].x + 1;
				if( l_NextTarget > g_Triangles[0].z * 64 + 63 )
				{
					l_Res.m_StateDepth = LIGHTMAP_STATE_TREADEND;
					g_Result[a_ThreadID.x] = l_Res;
					InterlockedAdd(g_Triangles[0].w, -1);
					return;
				}

				l_RayID -= l_MaxSampleCount;
				l_Res.m_BoxHarmonicsID = l_NextTarget;
			}
			else l_Res.m_BoxHarmonicsID = g_Triangles[0].x;

			l_Res.m_StateDepth = l_Res.m_StateDepth & 0xffffff00;
			l_Res.m_Color = float3(1.0, 1.0, 1.0);
			l_Res.m_Emissive = float3(0.0, 0.0, 0.0);
			l_Res.m_TriangleIdx = -1;
			l_Res.m_CurrID = (l_Res.m_BoxHarmonicsID & 0xffc0) / 64;

			l_Box = g_Box[l_Res.m_CurrID];
			l_Res.m_RayOrigin = l_Box.m_BoxCenter;
			
			int3 l_BoxIdx;
			l_BoxIdx.x = l_Res.m_BoxHarmonicsID & 63;
			l_BoxIdx.z = l_BoxIdx.x / 16;
			l_BoxIdx.y = (l_BoxIdx.x / 4) % 4;
			l_BoxIdx.x = l_BoxIdx.x % 4;

			const float c_Sub[4] = {-0.375, -0.125, 0.125, 0.375};
			l_Res.m_RayOrigin += l_Box.m_BoxSize * float3(c_Sub[l_BoxIdx.x], c_Sub[l_BoxIdx.y], c_Sub[l_BoxIdx.z]);

			float l_Quad = sqrt(l_MaxSampleCount);
			float l_Phi = a_ThreadID.x / l_Quad;
			float l_Theta = floor(l_Phi) / l_Quad;
			l_Phi = frac(l_Phi);

			l_Theta = acos(1.0 - 2.0 * l_Theta);
			l_Phi = 2.0 * MATH_PI * l_Phi;

			l_Res.m_RayDir = normalize(float3(cos(l_Theta) * sin(l_Phi), cos(l_Theta) * cos(l_Phi), sin(l_Theta)));
			}break;

		case LIGHTMAP_STATE_TREADEND: return;

		case LIGHTMAP_STATE_NEXTBOX:{
			LightmapBox l_ThisBox = g_Box[l_Res.m_CurrBoxID];
			float3 l_LengthSign = sign(l_Res.m_RayDir) * 0.5;
			float3 l_LengthVec = abs((l_ThisBox.m_BoxCenter + l_LengthSign * l_ThisBox.m_BoxSize - l_Res.m_RayOrigin) / l_Res.m_RayDir);
			
			int l_NextBox = 0;
			if( 0.0 != l_LengthSign.x && l_LengthVec.x < l_LengthVec.y && l_LengthVec.x < l_LengthVec.z )
			{
				if( l_LengthSign.x < 0 ) l_NextBox = l_ThisBox.m_NegitiveNeighbor.x;
				else l_NextBox = l_ThisBox.m_PositiveNeighbor.x;

				if( -1 == l_NextBox )
				{
					l_Res.m_StateDepth = l_Res.m_StateDepth & 0x000000ff;
					assignResult(l_Res);
					g_Result[a_ThreadID.x] = l_Res;
					return;
				}

				int l_CheckTimes = round(log2(l_ThisBox.m_BoxSize.x));
			}
			else if( 0.0 != l_LengthSign.y && l_LengthVec.y < l_LengthVec.x && l_LengthVec.y < l_LengthVec.z )
			{
			}

			 
			}break;

		//case LIGHTMAP_STATE_THROUGH:
		default:break;
	}

	float l_MinDist = FLT_MAX;
	int l_TargetTriangle = -1;
	for( int i=l_Box.m_TriangleRange.x ; i<l_Box.m_TriangleRange.y ; ++i )
	{
		if( l_Res.m_TriangleIdx == i ) continue;

		LightmapVertex l_Pos1 = g_Vertex[g_Triangles[i].x];
		LightmapVertex l_Pos2 = g_Vertex[g_Triangles[i].y];
		LightmapVertex l_Pos3 = g_Vertex[g_Triangles[i].z];

		float l_Dist = intersectRayTriangle(l_Res.m_RayOrigin, l_Res.m_RayDir, l_Pos1.m_Position, l_Pos2.m_Position, l_Pos3.m_Position);
		if( l_Dist >= 0.0 && l_Dist < l_MinDist )
		{
			l_MinDist = l_Dist;
			l_TargetTriangle = i;
		}
	}

	l_Res.m_StateDepth = l_Res.m_StateDepth & 0x000000ff;
	l_Res.m_RayOrigin += l_MinDist * l_Res.m_RayDir;
	if( -1 == l_TargetTriangle ) l_Res.m_StateDepth += LIGHTMAP_STATE_NEXTBOX;
	else
	{
		l_Res.m_StateDepth += LIGHTMAP_STATE_SCATTER;
		l_Res.m_TriangleIdx = l_TargetTriangle;
	}

	g_Result[a_ThreadID.x] = l_Res;
}