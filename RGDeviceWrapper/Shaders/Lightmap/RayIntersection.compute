#include <StdInclude.h>
#include "autoBinder.h"

#include "Lightmap.h"

#define EDGE_THREASHOLD 0.1
#define NEIGHBOR_INDEX(x, y, z) (9*z+3*y+x)
#define NP 0
#define ZP 1
#define PP 2

[numthreads(16, 1, 1 )]
void main(uint3 a_ThreadID : SV_DispatchThreadID)
{
	LightmapIntersectResult l_Res = g_Result[a_ThreadID.x];
	LightmapBoxCache l_Box = (LightmapBoxCache)0;
	switch( l_Res.m_StateDepth & 0xffffff00 )
	{
		case LIGHTMAP_STATE_IDLE:{
			int l_RayID = 0;
			InterlockedAdd(CURR_SAMPLE, 1, l_RayID);
			bool l_bUseNext = l_RayID >= MAX_SAMPLE;
			if( l_bUseNext )
			{
				if( 0 > NEXT_HARMONIC )
				{
					l_Res.m_StateDepth = LIGHTMAP_STATE_TREADEND;
					g_Result[a_ThreadID.x] = l_Res;
					InterlockedAdd(VALID_THREAD, -1);
					return;
				}

				l_RayID -= MAX_SAMPLE;
				l_Res.m_HarmonicsID = NEXT_HARMONIC;
			}
			else l_Res.m_HarmonicsID = CURR_HARMONIC;

			l_Res.m_StateDepth = 0;
			l_Res.m_Color = float3(1.0, 1.0, 1.0);
			l_Res.m_Emissive = float3(0.0, 0.0, 0.0);
			l_Res.m_TriangleIdx = -1;
			l_Res.m_CurrBoxID = l_bUseNext ? NEXT_BOX : CURR_BOX;

			l_Box = g_Box[l_Res.m_CurrBoxID];
			l_Res.m_RayOrigin = l_Box.m_BoxCenter;
			
			int3 l_BoxIdx;
			for( uint i=0 ; i<64 ; ++i )
			{
				if( l_Box.m_SHResult[i/4][i%4] != l_Res.m_HarmonicsID ) continue;

				l_BoxIdx.z = i / 16;
				l_BoxIdx.y = (i / 4) % 4;
				l_BoxIdx.x = i % 4;
				break;
			}

			const float c_Sub[4] = {-0.375, -0.125, 0.125, 0.375};
			l_Res.m_RayOrigin += l_Box.m_BoxSize * float3(c_Sub[l_BoxIdx.x], c_Sub[l_BoxIdx.y], c_Sub[l_BoxIdx.z]);

			float2 l_PhiTheta = sphereRandom(a_ThreadID.x);
			l_Res.m_RayDir = normalize(float3(cos(l_PhiTheta.y) * sin(l_PhiTheta.x), cos(l_PhiTheta.y) * cos(l_PhiTheta.x), sin(l_PhiTheta.y)));
			l_Res.m_OriginNormal = l_Res.m_RayDir;
			}break;

		case LIGHTMAP_STATE_TREADEND: return;

		case LIGHTMAP_STATE_CHILDBOX:{
			l_Box = g_Box[l_Res.m_CurrBoxID];

			float l_Min = FLT_MAX;
			bool l_bFoundMinBox = false;
			bool l_bLeaf = true;
			for( int i=0 ; i<8 ; ++i )
			{
				if( -1 == l_Box.m_Children[i] ) continue;
				l_bLeaf = false;

				LightmapBoxCache l_ChildBox = g_Box[l_Box.m_Children[i]];
				if( abs(l_Res.m_RayOrigin.x - l_ChildBox.m_BoxCenter.x) - 0.5 * l_ChildBox.m_BoxSize.x <= EDGE_THREASHOLD &&
					abs(l_Res.m_RayOrigin.y - l_ChildBox.m_BoxCenter.y) - 0.5 * l_ChildBox.m_BoxSize.y <= EDGE_THREASHOLD &&
					abs(l_Res.m_RayOrigin.z - l_ChildBox.m_BoxCenter.z) - 0.5 * l_ChildBox.m_BoxSize.z <= EDGE_THREASHOLD )
				{
					l_Res.m_CurrBoxID = l_Box.m_Children[i];
					g_Result[a_ThreadID.x] = l_Res;
					return;
				}

				float l_Dist = intersectRayAABB(l_Res.m_RayOrigin, l_Res.m_RayDir, l_ChildBox.m_BoxCenter, l_ChildBox.m_BoxSize);
				if( l_Dist > 0 && l_Dist < l_Min )
				{
					l_Min = l_Dist;
					l_bFoundMinBox = true;
					l_Res.m_CurrBoxID = l_Box.m_Children[i];
				}
			}
			if( l_bFoundMinBox )
			{
				l_Res.m_RayOrigin += l_Min * l_Res.m_RayDir;
				g_Result[a_ThreadID.x] = l_Res;
				return;
			}
			else if( !l_bLeaf )
			{
				l_Res.m_StateDepth = l_Res.m_StateDepth & 0x000000ff;
				l_Res.m_StateDepth += LIGHTMAP_STATE_NEXTBOX;
				g_Result[a_ThreadID.x] = l_Res;
				return;
			}
			}break;

		case LIGHTMAP_STATE_NEXTBOX:{
			l_Box = g_Box[l_Res.m_CurrBoxID];

			float3 l_LengthSign = sign(l_Res.m_RayDir) * 0.5;
			float3 l_LengthVec = abs((l_Box.m_BoxCenter + l_LengthSign * l_Box.m_BoxSize - l_Res.m_RayOrigin) / l_Res.m_RayDir);
			int3 l_DirOffset = int3(ZP, ZP, ZP);
			if( abs(l_LengthVec.x - l_LengthVec.y) < EDGE_THREASHOLD && abs(l_LengthVec.x - l_LengthVec.z) < EDGE_THREASHOLD && abs(l_LengthVec.z - l_LengthVec.y) < EDGE_THREASHOLD )
			{
				l_DirOffset.x = l_LengthSign.x < 0.0 ? NP : PP;
				l_DirOffset.y = l_LengthSign.y < 0.0 ? NP : PP;
				l_DirOffset.z = l_LengthSign.z < 0.0 ? NP : PP;
			}
			else
			{
				l_Min = min(l_LengthVec.x, min(l_LengthVec.y, l_LengthVec.z));
				if( l_Min == l_LengthVec.x )
				{
					l_DirOffset.x = l_LengthSign.x < 0.0 ? NP : PP;
					if( abs(l_Min - l_LengthVec.y) < EDGE_THREASHOLD )		l_DirOffset.y = l_LengthSign.y < 0.0 ? NP : PP;
					else if( abs(l_Min - l_LengthVec.z) < EDGE_THREASHOLD )	l_DirOffset.z = l_LengthSign.z < 0.0 ? NP : PP;
				}
				else if( l_Min == l_LengthVec.y )
				{
					l_DirOffset.y = l_LengthSign.y < 0.0 ? NP : PP;
					if( abs(l_Min - l_LengthVec.x) < EDGE_THREASHOLD )		l_DirOffset.x = l_LengthSign.x < 0.0 ? NP : PP;
					else if( abs(l_Min - l_LengthVec.z) < EDGE_THREASHOLD )	l_DirOffset.z = l_LengthSign.z < 0.0 ? NP : PP;
				}
				else
				{
					l_DirOffset.z = l_LengthSign.z < 0.0 ? NP : PP;
					if( abs(l_Min - l_LengthVec.x) < EDGE_THREASHOLD )		l_DirOffset.x = l_LengthSign.x < 0.0 ? NP : PP;
					else if( abs(l_Min - l_LengthVec.y) < EDGE_THREASHOLD )	l_DirOffset.y = l_LengthSign.y < 0.0 ? NP : PP;
				}
			}

			l_Res.m_CurrBoxID = l_Box.m_Neighbor[NEIGHBOR_INDEX(l_DirOffset.x, l_DirOffset.y, l_DirOffset.z)];
			if( -1 == l_Res.m_CurrBoxID )
			{
				l_Res.m_StateDepth = l_Res.m_StateDepth & 0x000000ff;
				l_Res.m_StateDepth += LIGHTMAP_STATE_TOSKY;
			}
			else
			{
				l_Res.m_RayOrigin += l_Min * l_Res.m_RayDir;
				l_Res.m_StateDepth = l_Res.m_StateDepth & 0x000000ff;
				l_Res.m_StateDepth += LIGHTMAP_STATE_CHILDBOX;
			}
			g_Result[a_ThreadID.x] = l_Res;
			}return;

		//case LIGHTMAP_STATE_THROUGH:
		default:break;
	}

	float l_MinDist = FLT_MAX;
	int l_TargetTriangle = -1;
	for( int i=l_Box.m_Triangle.x ; i<l_Box.m_Triangle.y ; ++i )
	{
		if( l_Res.m_TriangleIdx == i ) continue;

		LightmapVertex l_Pos1 = g_Vertex[g_Indicies[i].x];
		LightmapVertex l_Pos2 = g_Vertex[g_Indicies[i].y];
		LightmapVertex l_Pos3 = g_Vertex[g_Indicies[i].z];

		float l_Dist = intersectRayTriangle(l_Res.m_RayOrigin, l_Res.m_RayDir, l_Pos1.m_Position, l_Pos2.m_Position, l_Pos3.m_Position);
		if( l_Dist >= 0.0 && l_Dist < l_MinDist )
		{
			l_MinDist = l_Dist;
			l_TargetTriangle = i;
		}
	}

	int l_TargetLight = -1;
	float3 l_LightColor;
	for( int i=l_Box.m_Light.x ; i<l_Box.m_Light.y ; ++i )
	{
		int l_Offset = LIGHT_OFFSET + i/2;
		int2 l_LightIdx = (0 == (i%2)) ? g_Indicies[l_Offset].xy : g_Indicies[l_Offset].zw;
		switch( l_LightIdx.x )
		{
			case LIGHT_TYPE_OMNI:{
				OmniLight l_Light = g_OmniLights[l_LightIdx.y];
				float l_Dist = intersectRaySphere(l_Res.m_RayOrigin, l_Res.m_RayDir, l_Light.m_Position, l_Light.m_PhysicRange);
				if( l_Dist >= 0.0 && l_Dist < l_MinDist )
				{
					l_TargetLight = i;
					l_MinDist = l_Dist;
					l_LightColor = l_Light.m_Color;
				}
				}break;

			case LIGHT_TYPE_SPOT:{
				SpotLight l_Light = g_SpotLights[l_LightIdx.y];
				float l_Dist = intersectRaySphere(l_Res.m_RayOrigin, l_Res.m_RayDir, l_Light.m_Position, l_Light.m_PhysicRange);
				if( l_Dist >= 0.0 && l_Dist < l_MinDist )
				{
					if( acos(dot(-l_Res.m_RayDir, l_Light.m_Direction)) <= l_Light.m_Angle )
					{
						l_TargetLight = i;
						l_MinDist = l_Dist;
						l_LightColor = l_Light.m_Color;
					}
				}
				}break;

			//case LIGHT_TYPE_DIR:
			default:break;
		}
	}
	if( -1 != l_TargetLight )
	{
		l_Res.m_Emissive += l_Res.m_Color * l_LightColor;
		encodeHarmonic(l_Res);
		l_Res.m_StateDepth = LIGHTMAP_STATE_IDLE;
		g_Result[a_ThreadID.x] = l_Res;
		return;
	}

	l_Res.m_StateDepth = l_Res.m_StateDepth & 0x000000ff;
	l_Res.m_RayOrigin += l_MinDist * l_Res.m_RayDir;
	if( -1 == l_TargetTriangle ) l_Res.m_StateDepth += LIGHTMAP_STATE_NEXTBOX;
	else
	{
		l_Res.m_StateDepth += LIGHTMAP_STATE_SCATTER;
		l_Res.m_TriangleIdx = l_TargetTriangle;
	}

	g_Result[a_ThreadID.x] = l_Res;
}